// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/balance_storage.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/balance_storage.go -destination ./internal/server/mock_balance_storage_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	model "github.com/Stern-Ritter/gophermart/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceStorage is a mock of BalanceStorage interface.
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage.
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance.
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockBalanceStorage) GetByUserID(ctx context.Context, userID int64) (model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockBalanceStorageMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockBalanceStorage)(nil).GetByUserID), ctx, userID)
}
